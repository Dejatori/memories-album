import mongoose, { Document, Schema, model } from 'mongoose';

/**
 * Interface for MediaItem document
 * Extends the Mongoose Document type
 */
export interface IMediaItem extends Document {
  type: 'image' | 'video';
  cloudinaryPublicId: string;
  cloudinaryUrl: string;
  thumbnailUrl?: string;
  title?: string;
  description?: string;
  uploader: mongoose.Types.ObjectId;
  album: mongoose.Types.ObjectId;
  createdAt: Date;
}

/**
 * Mongoose schema for MediaItem
 * Defines fields, validations and relationships
 */
const mediaItemSchema = new Schema<IMediaItem>(
  {
    // Type: required, enum of 'image' or 'video'
    type: {
      type: String,
      required: [true, 'Media type is required'],
      enum: {
        values: ['image', 'video'],
        message: 'Type must be either image or video',
      },
    },

    // Cloudinary public ID: required
    cloudinaryPublicId: {
      type: String,
      required: [true, 'Cloudinary public ID is required'],
    },

    // Cloudinary URL: required
    cloudinaryUrl: {
      type: String,
      required: [true, 'Cloudinary URL is required'],
    },

    // Thumbnail URL: optional (can be generated by Cloudinary)
    thumbnailUrl: {
      type: String,
    },

    // Title: optional, trimmed
    title: {
      type: String,
      trim: true,
    },

    // Description: optional, trimmed
    description: {
      type: String,
      trim: true,
    },

    // Uploader: required reference to User model
    uploader: {
      type: Schema.Types.ObjectId,
      ref: 'User',
      required: [true, 'Uploader is required'],
    },

    // Album: required reference to Album model
    album: {
      type: Schema.Types.ObjectId,
      ref: 'Album',
      required: [true, 'Album is required'],
    },
  },
  {
    // Enable timestamps for createdAt only, not updatedAt
    timestamps: { createdAt: true, updatedAt: false },
  }
);

// Create and export the MediaItem model
export default model<IMediaItem>('MediaItem', mediaItemSchema);
